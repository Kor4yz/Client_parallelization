import socket
import json
import numpy as np
from prettytable import PrettyTable
import carla
import threading
import psutil
import GPUtil
import time
import cv2

class CarlaServer:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen(5)
        self.clients = {}  # {client_id: socket}
        self.client_vehicles = {}  # {client_id: [—Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω]}
        self.world = None
        self.monitoring_active = True
        self.client_info = {}

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CARLA
        try:
            self.client = carla.Client("localhost", 2000)
            self.client.set_timeout(10.0)
            self.world = self.client.get_world()
            print(f"‚úÖ CARLA –∑–∞–ø—É—â–µ–Ω–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–ø–∞–≤–Ω–∞: {len(self.world.get_map().get_spawn_points())})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CARLA: {e}")


    def start(self):
        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        while True:
            client_socket, client_address = self.server_socket.accept()
            client_id = str(client_address)
            self.clients[client_id] = client_socket
            self.client_vehicles[client_id] = []
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç: {client_address} (ID: {client_id})")
            threading.Thread(target=self.handle_client, args=(client_id, client_socket), daemon=True).start()

    def handle_client(self, client_id, client_socket):
        buffer = ""
        try:
            while True:
                chunk = client_socket.recv(1024).decode()
                if not chunk:
                    break
                buffer += chunk
                while "\n" in buffer:
                    json_obj, buffer = buffer.split("\n", 1)
                    command = json.loads(json_obj)
                    self.process_command(client_id, command)
        except ConnectionResetError:
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª—Å—è (WinError 10054)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        finally:
            self.cleanup_client(client_id)

    def process_command(self, client_id, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        if command.get("action") != "send_device_info" :
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {client_id}: {command}")

        if command.get("action") == "request_spawn":
            num_vehicles = command.get("num_vehicles", 10)
            self.spawn_vehicles(client_id, num_vehicles)

        elif command.get("action") == "get_vehicle_info":
            self.send_vehicle_info(client_id)

        elif command.get("action") == "disconnect":
            self.cleanup_client(client_id)
            self.send_message(client_id, {"action": "disconnect"})

        elif command.get("action") == "send_device_info":
            device_info = command.get("device_info", {})
            if device_info:
                self.client_info[client_id] = device_info

        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {client_id}: {command}")

    def show_clients_table(self):
        table = PrettyTable()

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è)
        all_keys = set()
        for info in self.client_info.values():
            all_keys.update(info.keys())

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        main_keys = ["OS", "OS Version", "CPU", "CPU Usage", "RAM Total", "RAM Used", "RAM Usage"]
        gpu_keys = ["GPU"]
        other_keys = sorted(all_keys - set(main_keys) - set(gpu_keys))  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏

        table.field_names = ["Client ID"] + main_keys + other_keys + ["GPU Info"]

        for client_id, info in self.client_info.items():
            row = [client_id]  # –ù–∞—á–∏–Ω–∞–µ–º —Å ID –∫–ª–∏–µ–Ω—Ç–∞

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for key in main_keys + other_keys:
                row.append(info.get(key, "N/A"))

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GPU (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å–æ–µ–¥–∏–Ω—è–µ–º –∏—Ö)
            gpu_data = "N/A"
            if info.get("GPU"):
                gpu_data = "\n".join([
                    f"{gpu['Name']} (Load: {gpu['Load']}, VRAM: {gpu['Memory Used']}/{gpu['Memory Total']})"
                    for gpu in info["GPU"]
                ])

            row.append(gpu_data)
            table.add_row(row)

        print("\n" + table.get_string() + "\n")

    def spawn_vehicles(self, client_id, num):
        blueprint_library = self.world.get_blueprint_library()
        vehicle_bp = blueprint_library.filter("vehicle.*")[0]
        spawn_points = self.world.get_map().get_spawn_points()
        spawned_vehicles = []

        for i in range(min(num, len(spawn_points))):
            vehicle = self.world.try_spawn_actor(vehicle_bp, spawn_points[i])
            if vehicle:
                vehicle.set_autopilot(True)
                spawned_vehicles.append({"vehicle": vehicle, "control_mode": "autopilot"})
                self.client_vehicles[client_id].append({"vehicle": vehicle, "control_mode": "autopilot"})
                print(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle.id} –∑–∞—Å–ø–∞–≤–Ω–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} (–∞–≤—Ç–æ–ø–∏–ª–æ—Ç)")

        self.send_message(client_id, {"action": "spawn_vehicles", "num_vehicles": len(spawned_vehicles)})

    def send_vehicle_info(self, client_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        vehicles_info = []
        if client_id in self.client_vehicles:
            for item in self.client_vehicles[client_id]:
                vehicle = item["vehicle"]
                if vehicle.is_alive:
                    transform = vehicle.get_transform()
                    velocity = vehicle.get_velocity()
                    vehicles_info.append({
                        "id": vehicle.id,
                        "speed": round((velocity.x ** 2 + velocity.y ** 2 + velocity.z ** 2) ** 0.5, 2),
                        "location": {"x": round(transform.location.x, 2), "y": round(transform.location.y, 2)},
                        "control_mode": item["control_mode"]
                    })
            self.send_message(client_id, {"action": "vehicle_info", "vehicles": vehicles_info})
        else:
            self.send_message(client_id, {"action": "vehicle_info", "vehicles": []})
    def cleanup_client(self, client_id):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 —Å–µ–∫—É–Ω–¥."""
        if client_id in self.clients:
            self.send_message(client_id, {
                "action": "disconnect_warning",
                "message": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ."
            })
            print(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            if client_id in self.client_vehicles:
                for item in self.client_vehicles[client_id]:
                    vehicle = item["vehicle"]
                    try:
                        if vehicle and vehicle.is_alive:
                            print(f"–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {vehicle.id} (–∫–ª–∏–µ–Ω—Ç {client_id})...")
                            vehicle.destroy()
                            print(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle.id} —É–Ω–∏—á—Ç–æ–∂–µ–Ω.")
                        else:
                            print(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle.id} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–∫–ª–∏–µ–Ω—Ç {client_id}).")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {vehicle.id}: {e}")
                del self.client_vehicles[client_id]
            if client_id in self.clients:
                self.clients[client_id].close()
                del self.clients[client_id]
            print(f"–ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–∫–ª—é—á–µ–Ω.")

    def send_message(self, client_id, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            if client_id in self.clients:
                self.clients[client_id].send((json.dumps(message) + "\n").encode())
        except (BrokenPipeError, ConnectionResetError):
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ.")

    def server_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º"""
        while True:
            print("\nüìå –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º:")
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
            print("3. –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID")
            print("4. –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID")
            print("5. –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
            print("6. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
            print("7. –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ (—É–±–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞)")
            print("8. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö")
            print("9. –í—ã—Ö–æ–¥")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
            if choice == "1":
                self.show_clients()
            elif choice == "2":
                self.show_vehicles()
            elif choice == "3":
                vehicle_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—à–∏–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                self.remove_vehicle_by_id(vehicle_id)
            elif choice == "4":
                client_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ")
                self.cleanup_client(client_id)
            elif choice == "5":
                if not hasattr(self, "monitor_thread") or not self.monitor_thread.is_alive():
                    self.monitoring_active = True
                    self.monitor_thread = threading.Thread(target=self.monitor_resources_loop, daemon=True)
                    self.monitor_thread.start()
                    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                else:
                    print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            elif choice == "6":
                if hasattr(self, "monitor_thread") and self.monitor_thread.is_alive():
                    self.stop_monitoring()
                    print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
            elif choice == "7":
                self.cleanup_all()
            elif choice == "8":
                self.show_clients_table()
            elif choice == "9":
                break

    def show_clients(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("\nüîó –ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
        for client_id in self.clients.keys():
            print(f"üîπ {client_id}")

    def show_vehicles(self):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
        print("\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:")
        for client_id, vehicles in self.client_vehicles.items():
            for item in vehicles:
                vehicle = item["vehicle"]
                mode = item["control_mode"]
                print(f" - ID: {vehicle.id}, –ö–ª–∏–µ–Ω—Ç: {client_id}, –†–µ–∂–∏–º: {mode}")

    def remove_vehicle_by_id(self, vehicle_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –µ–≥–æ ID"""
        for client_id, vehicles in self.client_vehicles.items():
            for item in vehicles:
                if item["vehicle"].id == vehicle_id:
                    try:
                        item["vehicle"].destroy()
                        vehicles.remove(item)
                        print(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle_id} —É–¥–∞–ª–µ–Ω.")
                        return
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {vehicle_id}: {e}")
                        return
        print("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def monitor_resources_loop(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        last_net = psutil.net_io_counters()
        while self.monitoring_active:
            cpu_usage = psutil.cpu_percent()
            ram = psutil.virtual_memory()
            net = psutil.net_io_counters()

            net_in = (net.bytes_recv - last_net.bytes_recv) / 1024 / 1024  # –ú–ë
            net_out = (net.bytes_sent - last_net.bytes_sent) / 1024 / 1024  # –ú–ë
            last_net = net

            gpu_info = "N/A"
            gpus = GPUtil.getGPUs()
            if gpus:
                gpu_info = f"GPU: {gpus[0].load * 100:.1f}% (VRAM: {gpus[0].memoryUsed}MB/{gpus[0].memoryTotal}MB)"

            print(f"üìä CPU: {cpu_usage:.1f}%, RAM: {ram.used / 1024 ** 3:.2f}/{ram.total / 1024 ** 3:.2f}GB "
                  f"Net ‚¨á {net_in:.2f}MB ‚¨Ü {net_out:.2f}MB {gpu_info}")

            time.sleep(5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.monitoring_active = False

    def cleanup_all(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞—à–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ CARLA –æ—Ç –≤—Å–µ—Ö –º–∞—à–∏–Ω –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã
        all_vehicles = self.world.get_actors().filter("vehicle.*")
        for vehicle in all_vehicles:
            try:
                vehicle.destroy()
                print(f"‚úÖ –ú–∞—à–∏–Ω–∞ {vehicle.id} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã {vehicle.id}: {e}")

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client_id in list(self.clients.keys()):  # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.cleanup_client(client_id)

        print("üõë –í—Å–µ –º–∞—à–∏–Ω—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

    def show_client_info(self, client_id=None):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö"""
        if not self.client_info:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!")
            return

        if client_id:
            if client_id in self.client_info:
                print(f"\nüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ {client_id}:")
                for key, value in self.client_info[client_id].items():
                    print(f"  {key}: {value}")
            else:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print("\nüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö:")
            for cid, info in self.client_info.items():
                print(f"\nüîπ –ö–ª–∏–µ–Ω—Ç {cid}:")
                for key, value in info.items():
                    print(f"  {key}: {value}")
                print("-" * 30)


if __name__ == "__main__":
    server = CarlaServer("0.0.0.0", 52399)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=server.start, daemon=True)
    server_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
    server.server_menu()
