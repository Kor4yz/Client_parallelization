import socket
import json
import threading
import platform
import psutil
import GPUtil
import time
import pygame
import numpy as np
import carla
import math

class CarlaClient:
    def __init__(self, server_ip, server_port):
        self.server_ip = server_ip
        self.server_port = server_port
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.running = True

    def connect(self):
        try:
            self.client_socket.connect((self.server_ip, self.server_port))
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É {self.server_ip}:{self.server_port}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            self.send_device_info()
            threading.Thread(target=self.listen_for_messages, daemon=True).start()

            while self.running:
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                print("1. –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∞–≤–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
                print("2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ")
                print("3. –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
                print("5. –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                choice = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã–±–æ—Ä (1-6): ").strip()

                if choice == "1":
                    num_vehicles = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —Å–ø–∞–≤–Ω–∞: "))
                    self.send_command({"action": "request_spawn", "num_vehicles": num_vehicles})
                elif choice == "2":
                    self.send_command({"action": "get_vehicle_info"})
                elif choice == "3":
                    self.disconnect()
                elif choice == "5":
                    self.manual_control()
                else:
                    print("\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def send_command(self, command):
        try:
            self.client_socket.send((json.dumps(command) + "\n").encode())
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def listen_for_messages(self):
        buffer = ""
        while self.running:
            try:
                chunk = self.client_socket.recv(1024).decode()
                if not chunk:
                    break
                buffer += chunk
                while "\n" in buffer:
                    json_obj, buffer = buffer.split("\n", 1)
                    command = json.loads(json_obj)
                    self.process_command(command)
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                break

    def get_device_info(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ: CPU, GPU, RAM –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–µ"""
        device_info = {
            "OS": platform.system(),
            "OS Version": platform.version(),
            "CPU": platform.processor(),
            "CPU Usage": f"{psutil.cpu_percent()}%",
            "RAM Total": f"{round(psutil.virtual_memory().total / 1024 ** 3, 2)} GB",
            "RAM Used": f"{round(psutil.virtual_memory().used / 1024 ** 3, 2)} GB",
            "RAM Usage": f"{psutil.virtual_memory().percent}%",
            "GPU": [],
        }

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö GPU
        gpus = GPUtil.getGPUs()
        for gpu in gpus:
            device_info["GPU"].append({
                "Name": gpu.name,
                "Load": f"{gpu.load * 100:.1f}%",
                "Memory Used": f"{gpu.memoryUsed} MB",
                "Memory Total": f"{gpu.memoryTotal} MB"
            })

        return device_info

    def send_device_info(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –∑–∞—Ç–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥"""
        def send_loop():
            while self.running:
                device_info = self.get_device_info()
                self.send_command({"action": "send_device_info", "device_info": device_info})
                time.sleep(5)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        threading.Thread(target=send_loop, daemon=True).start()

    def process_command(self, command):
        if command.get("action") == "spawn_vehicles":
            num_spawned = command.get("num_vehicles", 0)
            print(f"\nüöó –°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∏–ª: –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–æ {num_spawned} –º–∞—à–∏–Ω.")
        elif command.get("action") == "vehicle_info":
            vehicles = command.get("vehicles", [])
            print("\nüöô –í–∞—à–∏ –º–∞—à–∏–Ω—ã:")
            for v in vehicles:
                print(f" - ID: {v['id']}, –°–∫–æ—Ä–æ—Å—Ç—å: {v['speed']} –º/—Å, –ü–æ–∑–∏—Ü–∏—è: {v['location']}, —Ä–µ–∂–∏–º: {v.get('control_mode', 'N/A')}")
        elif command.get("action") == "disconnect":
            print("üîå\n–°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.")
            self.disconnect()
        elif command.get("action") == "disconnect_warning":
            print("\nüîå –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª –í–∞—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
            self.running = False
        else:
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    def disconnect(self):
        print("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        self.running = False
        self.send_command({"action": "disconnect"})
        self.client_socket.close()

    def manual_control(self):
        print("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ–ø–µ—Ä–µ–¥–∞—á–µ–π...")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ CARLA-—Å–µ—Ä–≤–µ—Ä—É
        try:
            carla_client = carla.Client("localhost", 2000)
            carla_client.set_timeout(10.0)
            world = carla_client.get_world()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CARLA: {e}")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        vehicle_id_input = input("–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ): ").strip()
        vehicles = world.get_actors().filter('vehicle.*')

        if not vehicles:
            print("‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –°–ø–∞–≤–Ω–∏—Ç–µ –∞–≤—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ò—â–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ
        if vehicle_id_input:
            try:
                vehicle_id = int(vehicle_id_input)
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            vehicle = next((v for v in vehicles if v.id == vehicle_id), None)
            if vehicle is None:
                print(f"‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å ID {vehicle_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
        else:
            vehicle = vehicles[0]

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ID = {vehicle.id}")
        vehicle.set_autopilot(False)
        print("üöó –ê–≤—Ç–æ–ø–∏–ª–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –í–∫–ª—é—á–µ–Ω–æ —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã (—Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ)
        blueprint_library = world.get_blueprint_library()
        camera_bp = blueprint_library.find('sensor.camera.rgb')
        camera_transform = carla.Transform(carla.Location(x=-5, z=3))
        camera = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)
        print("üì∑ –ö–∞–º–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
        image_surface = None
        lock = threading.Lock()

        def process_img(image):
            array = np.frombuffer(image.raw_data, dtype=np.uint8)
            array = np.reshape(array, (image.height, image.width, 4))
            array = array[:, :, :3][:, :, ::-1]
            return pygame.surfarray.make_surface(array.swapaxes(0, 1))

        def sensor_callback(image):
            nonlocal image_surface
            surface = process_img(image)
            with lock:
                image_surface = surface

        def draw_minimap(display, world, vehicle_location, vehicle_rotation, radius, x, y):
            """ –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–∏–Ω–∏-–∫–∞—Ä—Ç—É –¥–æ—Ä–æ–≥ –≤ —Ä–∞–¥–∏—É—Å–µ 'radius' –≤–æ–∫—Ä—É–≥ –º–∞—à–∏–Ω—ã. """
            pygame.draw.rect(display, (0, 0, 0), (x, y, 200, 200))  # –§–æ–Ω –º–∏–Ω–∏-–∫–∞—Ä—Ç—ã
            pygame.draw.rect(display, (200, 200, 200), (x, y, 200, 200), 2)  # –ì—Ä–∞–Ω–∏—Ü–∞

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–æ—Ä–æ–≥
            map = world.get_map()
            waypoints = map.generate_waypoints(2.0)

            for wp in waypoints:
                road_x, road_y = wp.transform.location.x, wp.transform.location.y
                dx, dy = road_x - vehicle_location.x, road_y - vehicle_location.y
                dist = math.sqrt(dx ** 2 + dy ** 2)

                if dist < radius:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏–Ω–∏-–∫–∞—Ä—Ç—É
                    map_x = int(x + 100 + (dx / radius) * 100)
                    map_y = int(y + 100 - (dy / radius) * 100)
                    pygame.draw.circle(display, (255, 255, 255), (map_x, map_y), 2)

            # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É
            pygame.draw.circle(display, (255, 0, 0), (x + 100, y + 100), 5)
            pygame.draw.line(display, (255, 0, 0), (x + 100, y + 100),
                             (x + 100 + 10 * math.cos(math.radians(vehicle_rotation)),
                              y + 100 - 10 * math.sin(math.radians(vehicle_rotation))), 2)

        camera.listen(sensor_callback)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
        pygame.init()
        window_width, window_height = 1280, 720
        display = pygame.display.set_mode((window_width, window_height))
        pygame.display.set_caption("CARLA - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        clock = pygame.time.Clock()
        font = pygame.font.SysFont("Arial", 20)

        try:
            while True:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        raise KeyboardInterrupt

                keys = pygame.key.get_pressed()
                control = carla.VehicleControl()

                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º (WASD + X)
                if keys[pygame.K_w]:
                    control.throttle = 1.0
                    control.reverse = False
                elif keys[pygame.K_s]:
                    control.throttle = 1.0
                    control.reverse = True
                else:
                    control.throttle = 0.0

                if keys[pygame.K_a]:
                    control.steer = -0.5
                elif keys[pygame.K_d]:
                    control.steer = 0.5
                else:
                    control.steer = 0.0

                control.hand_brake = keys[pygame.K_SPACE]
                vehicle.apply_control(control)

                # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å ‚Üí –∫–º/—á)
                velocity = vehicle.get_velocity()
                speed = math.sqrt(velocity.x ** 2 + velocity.y ** 2 + velocity.z ** 2) * 3.6

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –∏ UI
                display.fill((0, 0, 0))
                with lock:
                    if image_surface:
                        scaled_surface = pygame.transform.scale(image_surface, (window_width, window_height))
                        display.blit(scaled_surface, (0, 0))


                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
                vehicle_transform = vehicle.get_transform()
                vehicle_location = vehicle_transform.location
                vehicle_rotation = vehicle_transform.rotation.yaw

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏–Ω–∏-–∫–∞—Ä—Ç—ã
                draw_minimap(display, world, vehicle_location, vehicle_rotation, 100, 20, 200) # —Ä–∞–¥–∏—É—Å, –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ x, –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ y

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                info_lines = [
                    f"ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {vehicle.id}",
                    f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –∫–º/—á",
                    f"–ì–∞–∑ (W): {control.throttle:.2f}",
                    f"–ù–∞–∑–∞–¥ (S): {'–î–∞' if control.reverse else '–ù–µ—Ç'}",
                    f"–†—É–ª—å (A/D): {control.steer:.2f}",
                    f"–†—É—á–Ω–æ–π —Ç–æ—Ä–º–æ–∑ (–ü—Ä–æ–±–µ–ª): {'–î–∞' if control.hand_brake else '–ù–µ—Ç'}",
                ]
                y_offset = 20
                pygame.draw.rect(display, (30, 30, 30), (10, 10, 280, 190)) #—á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ñ–æ–Ω) –ø–µ—Ä–≤—ã–µ –¥–≤–µ - –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –≤—Ç–æ—Ä—ã–µ 2 —Ä–∞–∑–º–µ—Ä
                pygame.draw.rect(display, (200, 200, 200), (10, 10, 280, 190), 2) #–±–µ–ª–∞—è —Ä–∞–º–∫–∞

                for line in info_lines:
                    text_surface = font.render(line, True, (255, 255, 255))
                    display.blit(text_surface, (20, y_offset))
                    y_offset += text_surface.get_height() + 5

                pygame.display.flip()
                clock.tick(30)

        except KeyboardInterrupt:
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")

        finally:
            camera.stop()
            camera.destroy()
            pygame.quit()
            vehicle.set_autopilot(True)
            print(f"üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle.id} —Å–Ω–æ–≤–∞ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞.")


if __name__ == "__main__":
    client = CarlaClient("172.23.16.1", 52399)  # –ò–∑–º–µ–Ω—è–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å IP –∏ –ø–æ—Ä—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    client.connect()
